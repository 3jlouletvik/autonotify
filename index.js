require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { connectDB, saveUserTokens, setPendingAuth, findUserByState, getUserAccounts, removeAccount, getAllUsers } = require('./database');
const { getAuthUrl, getTokensFromCode } = require('./gmailAuth');
const { getEmailAddress, startWatching, getRecentMessages, getMessage, markAsRead } = require('./gmailWatcher');
const { extractVerificationCode } = require('./codeExtractor');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const app = express();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
function getMainKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å Gmail', callback_data: 'add' }],
        [{ text: 'üìã –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã', callback_data: 'list' }],
        [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'remove' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
      ]
    }
  };
}

// /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 
    'üëã *–ü—Ä–∏–≤–µ—Ç!*\n\n' +
    '–Ø –ø–æ–º–æ–≥—É –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ Gmail –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n' +
    '‚ú® –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω—É–∂–µ–Ω –≤—Å–µ–≥–æ *1 –∫–ª–∏–∫*!',
    { parse_mode: 'Markdown', ...getMainKeyboard() }
  );
});

// /status
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const accounts = await getUserAccounts(chatId);

    let message = '*üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*\n\n';
    message += `üë§ Telegram ID: \`${chatId}\`\n`;
    message += `üìß –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length}\n\n`;

    if (accounts.length > 0) {
      message += '*–ê–∫–∫–∞—É–Ω—Ç—ã:*\n';
      for (const acc of accounts) {
        const date = new Date(acc.addedAt).toLocaleDateString('ru-RU');
        message += `‚Ä¢ \`${acc.email}\`\n  –î–æ–±–∞–≤–ª–µ–Ω: ${date}\n`;
      }
    }

    message += `\n‚è± –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫\n`;
    message += `üì¨ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –ø–∏—Å–µ–º\n`;
    message += `‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`;

    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    console.error(error);
  }
});

// /test - —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
bot.onText(/\/test/, async (msg) => {
  const chatId = msg.chat.id;
  const testMsg = await bot.sendMessage(chatId, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É –≤—Ä—É—á–Ω—É—é...');

  try {
    const accounts = await getUserAccounts(chatId);

    if (accounts.length === 0) {
      await bot.editMessageText('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', {
        chat_id: chatId,
        message_id: testMsg.message_id
      });
      return;
    }

    let found = 0;
    let totalMessages = 0;

    for (const account of accounts) {
      console.log(`[TEST] –ü—Ä–æ–≤–µ—Ä–∫–∞ ${account.email}`);
      const messages = await getRecentMessages(account.tokens, 20);
      totalMessages += messages ? messages.length : 0;
      console.log(`[TEST] –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: ${messages ? messages.length : 0}`);

      if (!messages || messages.length === 0) {
        continue;
      }

      for (const msg of messages) {
        const fullMessage = await getMessage(account.tokens, msg.id);
        const { codes, subject, from } = extractVerificationCode(fullMessage);

        if (codes.length > 0) {
          found++;

          // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∫–∞–∫–æ–π –ø–æ—á—Ç—ã –∫–æ–¥
          let botMessage = `üîë *–ù–æ–≤—ã–π –∫–æ–¥!*\n\n`;
          botMessage += `üìß Gmail: \`${account.email}\`\n`;
          botMessage += `üì® –û—Ç: \`${from}\`\n`;
          botMessage += `üìù –¢–µ–º–∞: ${subject}\n\n`;
          botMessage += `*–ö–æ–¥—ã:* ${codes.map(c => '`' + c + '`').join(', ')}`;

          await bot.sendMessage(chatId, botMessage, { parse_mode: 'Markdown' });
        }
      }
    }

    await bot.editMessageText(
      `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
      `üì¨ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∏—Å–µ–º: ${totalMessages}\n` +
      `üîë –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: ${found}`,
      {
        chat_id: chatId,
        message_id: testMsg.message_id
      }
    );

  } catch (error) {
    await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
      chat_id: chatId,
      message_id: testMsg.message_id
    });
    console.error(error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === 'add') {
    bot.answerCallbackQuery(query.id);

    try {
      const state = chatId.toString();
      await setPendingAuth(chatId, state);

      const authUrl = getAuthUrl(state);

      bot.sendMessage(chatId,
        'üîê *–®–∞–≥ 1 –∏–∑ 1 (—ç—Ç–æ –≤—Å—ë!)*\n\n' +
        '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ä–∞–∑—Ä–µ—à–∏ –¥–æ—Å—Ç—É–ø –∫ Gmail - –∏ –≥–æ—Ç–æ–≤–æ!\n\n' +
        '‚úÖ –ù–∏–∫–∞–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π –∏ –∫–æ–¥–æ–≤\n' +
        '‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Gmail', url: authUrl }
            ]]
          }
        }
      );
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π /start');
      console.error(error);
    }

  } else if (data === 'list') {
    bot.answerCallbackQuery(query.id);

    try {
      const accounts = await getUserAccounts(chatId);

      if (accounts.length === 0) {
        return bot.sendMessage(chatId, 
          'üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å Gmail"',
          { parse_mode: 'Markdown', ...getMainKeyboard() }
        );
      }

      let message = '*üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ Gmail –∞–∫–∫–∞—É–Ω—Ç—ã:*\n\n';
      accounts.forEach((acc, index) => {
        const date = new Date(acc.addedAt).toLocaleDateString('ru-RU');
        message += `${index + 1}. \`${acc.email}\`\n   –î–æ–±–∞–≤–ª–µ–Ω: ${date}\n\n`;
      });

      bot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        ...getMainKeyboard() 
      });
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
      console.error(error);
    }

  } else if (data === 'remove') {
    bot.answerCallbackQuery(query.id);

    try {
      const accounts = await getUserAccounts(chatId);

      if (accounts.length === 0) {
        return bot.sendMessage(chatId, 'üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', getMainKeyboard());
      }

      const keyboard = accounts.map((acc, index) => [{
        text: `${index + 1}. ${acc.email}`,
        callback_data: `del_${acc.email}`
      }]);
      keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'menu' }]);

      bot.sendMessage(chatId, 
        '*–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*',
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        }
      );
    } catch (error) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
      console.error(error);
    }

  } else if (data.startsWith('del_')) {
    const email = data.replace('del_', '');

    try {
      await removeAccount(chatId, email);
      bot.answerCallbackQuery(query.id, { text: '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω' });
      bot.editMessageText(
        `‚úÖ –ê–∫–∫–∞—É–Ω—Ç \`${email}\` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          parse_mode: 'Markdown',
          ...getMainKeyboard()
        }
      );
    } catch (error) {
      bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
      console.error(error);
    }

  } else if (data === 'help') {
    bot.answerCallbackQuery(query.id);
    bot.sendMessage(chatId,
      '*‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n\n' +
      '*1.* –ù–∞–∂–∏–º–∞–µ—à—å "‚ûï –ü–æ–¥–∫–ª—é—á–∏—Ç—å Gmail"\n' +
      '*2.* –†–∞–∑—Ä–µ—à–∞–µ—à—å –¥–æ—Å—Ç—É–ø –≤ Google (1 –∫–ª–∏–∫)\n' +
      '*3.* –ì–æ—Ç–æ–≤–æ! –ö–æ–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n' +
      '*üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n' +
      '‚Ä¢ –ë–æ—Ç –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞\n' +
      '‚Ä¢ –ù–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Å—å–º–∞\n' +
      '‚Ä¢ –î–æ—Å—Ç—É–ø –º–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n' +
      '*‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å:*\n' +
      '–ö–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥',
      { parse_mode: 'Markdown', ...getMainKeyboard() }
    );

  } else if (data === 'menu') {
    bot.answerCallbackQuery(query.id);
    bot.editMessageText(
      'üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'Markdown',
        ...getMainKeyboard()
      }
    );
  }
});

// OAuth callback
app.get('/oauth/callback', async (req, res) => {
  const code = req.query.code;
  const state = req.query.state;
  const error = req.query.error;

  if (error) {
    res.send('<h1>‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω–µ–Ω</h1><p>–¢—ã –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Gmail.</p><p>–ú–æ–∂–µ—à—å –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –±–æ—Ç–µ.</p>');
    return;
  }

  if (!code || !state) {
    res.send('<h1>‚ùå –û—à–∏–±–∫–∞</h1><p>–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</p>');
    return;
  }

  try {
    const user = await findUserByState(state);
    if (!user) {
      res.send('<h1>‚ùå –û—à–∏–±–∫–∞</h1><p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –±–æ—Ç–µ.</p>');
      return;
    }

    const telegramId = user.telegramId;
    const tokens = await getTokensFromCode(code);
    const email = await getEmailAddress(tokens);
    const historyId = await startWatching(tokens);

    await saveUserTokens(telegramId, email, tokens, historyId);

    bot.sendMessage(telegramId,
      `‚úÖ *Gmail —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!*\n\n` +
      `üìß –ê–∫–∫–∞—É–Ω—Ç: \`${email}\`\n\n` +
      `–ö–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.`,
      { parse_mode: 'Markdown', ...getMainKeyboard() }
    );

    res.send(`
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
          }
          .container {
            text-align: center;
            padding: 40px;
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            max-width: 500px;
          }
          h1 { font-size: 64px; margin: 0; }
          h2 { font-size: 32px; margin: 10px 0; }
          p { font-size: 18px; opacity: 0.9; }
          .email { 
            background: rgba(255,255,255,0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            word-break: break-all;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>‚úÖ</h1>
          <h2>–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!</h2>
          <p>Gmail –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram –±–æ—Ç—É</p>
          <div class="email">${email}</div>
          <p>–ö–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
          <p style="margin-top: 30px; font-size: 14px;">–ú–æ–∂–µ—à—å –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ</p>
        </div>
        <script>
          setTimeout(() => { window.close(); }, 5000);
        </script>
      </body>
      </html>
    `);

  } catch (error) {
    console.error('‚ùå OAuth callback error:', error);
    res.send(`<h1>‚ùå –û—à–∏–±–∫–∞</h1><p>${error.message}</p><p>–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –≤ –±–æ—Ç–µ.</p>`);
  }
});

// Health check
app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

app.get('/', (req, res) => {
  res.send('‚úÖ Telegram Gmail Bot is running!');
});

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function emailChecker() {
  try {
    console.log('\nüîÑ [EmailChecker] ========== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ ==========');
    console.log(`‚è∞ [EmailChecker] –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);

    const users = await getAllUsers();
    console.log(`üë• [EmailChecker] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    if (users.length === 0) {
      console.log('‚ö†Ô∏è  [EmailChecker] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    for (const user of users) {
      console.log(`\nüë§ [EmailChecker] ===== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.telegramId} =====`);
      console.log(`üìß [EmailChecker] –ê–∫–∫–∞—É–Ω—Ç–æ–≤ Gmail: ${user.gmailAccounts.length}`);

      if (user.gmailAccounts.length === 0) {
        console.log('‚ö†Ô∏è  [EmailChecker] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
        continue;
      }

      for (const account of user.gmailAccounts) {
        try {
          console.log(`\nüì¨ [EmailChecker] ----- –ü—Ä–æ–≤–µ—Ä–∫–∞: ${account.email} -----`);

          // –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–µ –ø–∏—Å–µ–º (20 –≤–º–µ—Å—Ç–æ 10)
          const messages = await getRecentMessages(account.tokens, 20);

          if (!messages) {
            console.log(`‚ö†Ô∏è  [EmailChecker] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–∞ –¥–ª—è ${account.email}`);
            continue;
          }

          console.log(`üì© [EmailChecker] –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: ${messages.length}`);

          if (messages.length === 0) {
            console.log(`‚úÖ [EmailChecker] –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º`);
            continue;
          }

          let codesFound = 0;

          for (const msg of messages) {
            try {
              console.log(`\n  üìß [EmailChecker] –ü–∏—Å—å–º–æ ID: ${msg.id}`);

              const fullMessage = await getMessage(account.tokens, msg.id);

              if (!fullMessage) {
                console.log(`  ‚ö†Ô∏è  [EmailChecker] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞`);
                continue;
              }

              const { codes, subject, from } = extractVerificationCode(fullMessage);

              console.log(`  üìù [EmailChecker] –¢–µ–º–∞: "${subject}"`);
              console.log(`  üì® [EmailChecker] –û—Ç: "${from}"`);
              console.log(`  üîç [EmailChecker] –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: ${codes.length}`);

              if (codes.length > 0) {
                codesFound++;
                console.log(`  üîë [EmailChecker] –ö–æ–¥—ã: [${codes.join(', ')}]`);

                // –£–õ–£–ß–®–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∫–∞–∫–æ–π –ø–æ—á—Ç—ã –ø—Ä–∏—à–µ–ª –∫–æ–¥
                let botMessage = `üîë *–ù–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!*\n\n`;
                botMessage += `üìß Gmail: \`${account.email}\`\n`;
                botMessage += `üì® –û—Ç: \`${from}\`\n`;
                botMessage += `üìù –¢–µ–º–∞: ${subject}\n\n`;
                botMessage += `*–ö–æ–¥—ã:* ${codes.map(c => '`' + c + '`').join(', ')}`;

                await bot.sendMessage(user.telegramId, botMessage, { parse_mode: 'Markdown' });
                console.log(`  ‚úÖ [EmailChecker] –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`);

                // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                await markAsRead(account.tokens, msg.id);
                console.log(`  ‚úÖ [EmailChecker] –ü–∏—Å—å–º–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
              } else {
                console.log(`  ‚ö†Ô∏è  [EmailChecker] –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
              }

            } catch (msgError) {
              console.error(`  ‚ùå [EmailChecker] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ ${msg.id}:`, msgError.message);
            }
          }

          console.log(`\nüìä [EmailChecker] –ò—Ç–æ–≥–æ –¥–ª—è ${account.email}:`);
          console.log(`   - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∏—Å–µ–º: ${messages.length}`);
          console.log(`   - –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: ${codesFound}`);

        } catch (accError) {
          console.error(`‚ùå [EmailChecker] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${account.email}:`, accError.message);

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
          if (accError.code === 401) {
            console.error(`‚ö†Ô∏è  [EmailChecker] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –¥–ª—è ${account.email} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
          } else if (accError.code === 403) {
            console.error(`‚ö†Ô∏è  [EmailChecker] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è ${account.email}`);
          } else if (accError.code === 429) {
            console.error(`‚ö†Ô∏è  [EmailChecker] Rate limit –¥–ª—è ${account.email} - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤`);
          }
        }
      }
    }

    console.log(`\n‚úÖ [EmailChecker] ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ==========\n`);

  } catch (error) {
    console.error('‚ùå [EmailChecker] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫
async function start() {
  try {
    await connectDB();

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`‚úÖ OAuth callback: ${process.env.BOT_URL}/oauth/callback`);
    });

    // –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
    console.log('\n‚è∞ [Startup] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã...');
    setInterval(emailChecker, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(emailChecker, 10000);  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    console.log('‚úÖ [Startup] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥');

    console.log('\n‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    console.log('‚úÖ –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π OAuth (–¥–ª—è —Å–∞–º—ã—Ö –ª–µ–Ω–∏–≤—ã—Ö)');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫\n');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Unhandled rejection:', error);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught exception:', error);
});
